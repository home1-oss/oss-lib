// see: https://docs.gradle.org/current/userguide/init_scripts.html
// see: https://docs.gradle.org/current/userguide/maven_plugin.html

// gradle dependencies
// gradle version
// gradle clean build
// gradle install
// gradle -Pinfrastructure=local clean install uploadArchives

buildscript {
  repositories {
    jcenter()
    maven { url 'https://plugins.gradle.org/m2/' }
    maven { url 'http://repo.spring.io/plugins-release' }
    maven { url 'http://repo.spring.io/plugins-milestone' }
    maven { url 'http://repo.spring.io/plugins-snapshot' }
  }
  dependencies {
    classpath 'io.spring.gradle:dependency-management-plugin:' + pluginDependencyManagementVersion
    classpath 'org.springframework.build.gradle:propdeps-plugin:' + pluginPropdepsVersion
  }
}

allprojects {
  //println "build.gradle allprojects ${project.name}"
  group = 'cn.home1'
}

subprojects {
  //println "build.gradle subprojects ${project.name}"
  //println "configurations.archives.allArtifacts: " + configurations.archives.allArtifacts

  apply from: "$rootDir/dependencies.gradle"

  dependencies {
    compile 'org.slf4j:slf4j-api'
    runtime 'org.slf4j:jcl-over-slf4j'
    runtime 'org.slf4j:jul-to-slf4j'
    runtime 'org.apache.logging.log4j:log4j-slf4j-impl'
    runtime 'org.apache.logging.log4j:log4j-1.2-api'
    compile 'org.apache.logging.log4j:log4j-api'
    compile 'org.apache.logging.log4j:log4j-core'
    runtime 'com.lmax:disruptor'

    compile 'org.apache.commons:commons-lang3',
      'com.google.guava:guava',
      'joda-time:joda-time'

    provided 'com.google.code.findbugs:annotations',
      'org.projectlombok:lombok',
      'com.google.auto.value:auto-value',
      'org.inferred:freebuilder'

    testCompile 'org.springframework:spring-test',
      'org.mockito:mockito-core',
      'org.hamcrest:hamcrest-all',
      'junit:junit'

    //if ("${gradle.ext.springBootApi}" >= "1.4.x") {
    //  testCompile file('testCompile.dependencies').readLines()
    testCompile 'org.springframework.boot:spring-boot-test'
    //}
  }
}

//task testProperties << {
task testProperties {
  doLast {
    logging.captureStandardOutput LogLevel.QUIET
    logging.captureStandardError LogLevel.ERROR
    if ( '1.5.4' < '1.5.6' ) { logger.quiet("1.5.4 < 1.5.6") } else { logger.quiet("1.5.4 > 1.5.6") }
    if ( '1.4.x' < '1.5.x' ) { logger.quiet("1.4.x < 1.5.x") } else { logger.quiet("1.4.x > 1.5.x") }
    logging.captureStandardOutput LogLevel.INFO
  }
}
